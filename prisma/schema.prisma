// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(ADMIN)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model Class {
  id          String    @id @default(cuid())
  name        String    @unique // "Class 9", "Class 10", "Class 11", "Class 12"
  description String?
  subjects    Subject[]
  videos      Video[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Subject {
  id       String   @id @default(cuid())
  name     String   // "Physics", "Chemistry", "Mathematics", "Biology"
  classId  String
  class    Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  topics   Topic[]
  videos   Video[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, classId])
}

model Topic {
  id        String     @id @default(cuid())
  name      String     // "Motion", "Chemical Bonding", "Calculus", etc.
  subjectId String
  subject   Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  questions Question[]
  videos    Video[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([name, subjectId])
}

model Question {
  id              String          @id @default(cuid())
  text            String
  optionA         String
  optionB         String
  optionC         String
  optionD         String
  correctAnswer   String          // "A", "B", "C", or "D"
  explanation     String
  difficulty      Difficulty      @default(MEDIUM)
  status          QuestionStatus  @default(APPROVED)
  topicId         String
  topic           Topic           @relation(fields: [topicId], references: [id], onDelete: Cascade)
  usages          QuestionUsage[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([text, topicId])
}

model QuestionUsage {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  videoId    String
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  usedAt     DateTime @default(now())

  @@unique([questionId, videoId])
}

model Video {
  id          String        @id @default(cuid())
  title       String
  description String?
  filename    String        @unique
  status      VideoStatus   @default(DRAFT)
  youtubeId   String?       // YouTube video ID after upload
  classId     String
  class       Class         @relation(fields: [classId], references: [id])
  subjectId   String
  subject     Subject       @relation(fields: [subjectId], references: [id])
  topicId     String
  topic       Topic         @relation(fields: [topicId], references: [id])
  questions   QuestionUsage[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Enums
enum Role {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum QuestionStatus {
  PENDING
  APPROVED
  REJECTED
  BANNED
}

enum VideoStatus {
  DRAFT
  GENERATING
  GENERATED
  UPLOADING
  UPLOADED
  FAILED
}
