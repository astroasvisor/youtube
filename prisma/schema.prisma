generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Class {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subjects    Subject[]
  videos      Video[]
}

model Subject {
  id        String   @id @default(cuid())
  name      String
  classId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  topics    Topic[]
  videos    Video[]

  @@unique([name, classId])
}

model Topic {
  id        String     @id @default(cuid())
  name      String
  subjectId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]
  subject   Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  videos    Video[]

  @@unique([name, subjectId])
}

model Question {
  id                   String          @id @default(cuid())
  text                 String
  optionA              String
  optionB              String
  optionC              String
  optionD              String
  correctAnswer        String
  explanation          String
  difficulty           Difficulty      @default(MEDIUM)
  status               QuestionStatus  @default(APPROVED)
  suggestedVideoTitle  String?         // AI-generated SEO-optimized video title
  suggestedVideoDesc   String?         // AI-generated SEO-optimized video description
  topicId              String
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  topic                Topic           @relation(fields: [topicId], references: [id], onDelete: Cascade)
  usages               QuestionUsage[]

  @@unique([text, topicId])
}

model QuestionUsage {
  id         String   @id @default(cuid())
  questionId String
  videoId    String
  usedAt     DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([questionId, videoId])
}

model Video {
  id          String          @id @default(cuid())
  title       String
  description String?
  filename    String          @unique
  status      VideoStatus     @default(DRAFT)
  youtubeId   String?
  classId     String
  subjectId   String
  topicId     String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  questions   QuestionUsage[]
  topicUsage  TopicUsage?
  class       Class           @relation(fields: [classId], references: [id])
  subject     Subject         @relation(fields: [subjectId], references: [id])
  topic       Topic           @relation(fields: [topicId], references: [id])
}

model TopicUsage {
  id        String   @id @default(cuid())
  classId   String
  subjectId String
  topicId   String
  usedAt    DateTime @default(now())
  videoId   String?  @unique
  video     Video?   @relation(fields: [videoId], references: [id])

  @@unique([classId, subjectId, topicId, usedAt])
}

enum Role {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum QuestionStatus {
  PENDING
  APPROVED
  REJECTED
  BANNED
}

enum VideoStatus {
  DRAFT
  GENERATING
  GENERATED
  UPLOADING
  UPLOADED
  FAILED
}
